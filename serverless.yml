
service: sns-nodejs-aws

frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  stage: dev
  region: us-east-1
  memorySize: 512
  timeout: 10
  environment: ${file(serverless_ssm.yml)}
  apiGateway:
    apiKeys:
      - name : xApiKey
        value : ${file(./serverless_ssm.yml):X_API_KEY}

plugins:
  - serverless-offline-sns
  - serverless-offline-ssm
  - serverless-offline 

functions:
  createManualTopic:
    handler: src/lambdas/createManualTopic.handler
    name: create-manual-topic-sns
    description: to create a manual topic
    events:
      - http:
          method: POST
          path: create-manual-topic
          private: true        

  listTopics:
    handler: handler.listTopics
    name: list-topic-sns
    description: to list all topics
    events:
      - http:
          method: GET
          path: list-topics
          private: true
      - sns:
          arn: ${file(./serverless_ssm.yml):SNS_DEFAULT_ARN}           

  publishTopic:
      handler: handler.publishTopic
      name: publish-topic-sns
      description: to publish a specific topic
      events:
        - http:
            method: POST
            path: publish-topic
            private: true

              

custom:
  serverless-offline:
    httpPort: ${file(./serverless_ssm.yml):SERVERLESS_HTTP_PORT}
    lambdaPort: ${file(./serverless_ssm.yml):SERVERLESS_LAMBDA_PORT}
  serverless-offline-sns:
    port: ${file(./serverless_ssm.yml):SNS_PORT}
    host: ${file(./serverless_ssm.yml):SNS_HOST}
    sns-endpoint: ${file(./serverless_ssm.yml):SNS_ENDPOINT}
    debug: true
  serverless-offline-ssm:
    stages:
      - dev
    ssm: 
      ${file(./serverless_ssm.yml)}     

resources:
  Resources:
    TopicExample:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: TopicExample